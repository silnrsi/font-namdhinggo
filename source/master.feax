#**********************************
#  Language Systems
#**********************************

languagesystem DFLT dflt;


#**********************************
#  Glyphs
#**********************************

table GDEF {
GlyphClassDef
    @GDEF_bases, # base glyphs
    ,     # no ligature glyphs
    @GDEF_marks, # mark glyphs
    ;     # no component glyphs
 } GDEF;


#**********************************
#  Glyph classes
#**********************************

@Cons = [ uni1901 uni1902 uni1903 uni1904 uni1905 uni1906 uni1907 uni1908 uni1909 uni190A uni190B uni190C uni190D uni190E uni190F
    uni1910 uni1911 uni1912 uni1913 uni1914 uni1915 uni1916 uni1917 uni1918 uni1919 uni191A uni191B uni191C uni191D uni191E ];

@ConsRaU = [ uni1901192A1922 uni1902192A1922 uni1903192A1922 uni1904192A1922 uni1905192A1922 uni1906192A1922 uni1907192A1922
    uni1908192A1922 uni1909192A1922 uni190A192A1922 uni190B192A1922 uni190C192A1922 uni190D192A1922 uni190E192A1922 uni190F192A1922
    uni1910192A1922 uni1911192A1922 uni1912192A1922 uni1913192A1922 uni1914192A1922 uni1915192A1922 uni1916192A1922 uni1917192A1922
    uni1918192A1922 uni1919192A1922 uni191A192A1922 uni191B192A1922 uni191C192A1922 uni191D192A1922 uni191E192A1922 ];

@ConsU = [ uni19011922 uni19021922 uni19031922 uni19041922 uni19051922 uni19061922 uni19071922 uni19081922 uni19091922 uni190A1922
    uni190B1922 uni190C1922 uni190D1922 uni190E1922 uni190F1922 uni19101922 uni19111922 uni19121922 uni19131922 uni19141922
    uni19151922 uni19161922 uni19171922 uni19181922 uni19191922 uni191A1922 uni191B1922 uni191C1922 uni191D1922 uni191E1922 ];

@AllCons = [ @Cons @ConsU @ConsRaU  ] ;

@Ikar = [ uni1921 uni1921193A  ] ;

@Vowels = [ uni1920 uni1927 uni1928  ] ;

@VowelsKem = [ @Vowels uni193A  ] ;

@YaWa = [ uni1929 uni192B  ] ;


#**********************************
#  Lookups
#**********************************

lookup OoAuDecomp {
  lookupflag 0 ;
  # The OoAuDecomp substitution rule replaces the OO and AU vowels with their visually constitutent components A plus EE or AI respectively. This is so that the 'A' portion can be positioned independently over the consonant when a Glide occurs between the consonant and the vowel.
    sub uni1925 by uni1920 uni1923 ;
    sub uni1926 by uni1920 uni1924 ;
} OoAuDecomp;

lookup EeAiKComp {
  lookupflag 0 ;
    sub uni1923 uni193A by uni1923193A ;
    sub uni1924 uni193A by uni1924193A ;
} EeAiKComp;

lookup EeAiKDecomp {
  lookupflag 0 ;
    sub uni1923193A by uni193A uni1923 ;
    sub uni1924193A by uni193A uni1924 ;
} EeAiKDecomp;

lookup GlideVowelComp {
  lookupflag 0 ;
    sub uni1929 uni1920 uni193A by uni19291920193A ;
    sub uni1929 uni1922 uni193A by uni19291922193A ;
    sub uni1929 uni1927 uni193A by uni19291927193A ;
    sub uni1929 uni1928 uni193A by uni19291928193A ;
    sub uni1929 uni193A by uni1929193A ;
    sub uni1929 uni1920 by uni19291920 ;
    sub uni1929 uni1922 by uni19291922 ;
    sub uni1929 uni1927 by uni19291927 ;
    sub uni1929 uni1928 by uni19291928 ;
    sub uni192B uni1920 uni193A by uni192B1920193A ;
    sub uni192B uni1922 uni193A by uni192B1922193A ;
    sub uni192B uni1927 uni193A by uni192B1927193A ;
    sub uni192B uni1928 uni193A by uni192B1928193A ;
    sub uni192B uni193A by uni192B193A ;
    sub uni192B uni1920 by uni192B1920 ;
    sub uni192B uni1922 by uni192B1922 ;
    sub uni192B uni1927 by uni192B1927 ;
    sub uni192B uni1928 by uni192B1928 ;
} GlideVowelComp;

lookup GlideVowelDecomp {
  lookupflag 0 ;
    sub uni19291920193A by uni1920 uni193A uni1929 ;
    sub uni19291922193A by uni1922 uni193A uni1929 ;
    sub uni19291927193A by uni1927 uni193A uni1929 ;
    sub uni19291928193A by uni1928 uni193A uni1929 ;
    sub uni1929193A by uni193A uni1929 ;
    sub uni19291920 by uni1920 uni1929 ;
    sub uni19291922 by uni1922 uni1929 ;
    sub uni19291927 by uni1927 uni1929 ;
    sub uni19291928 by uni1928 uni1929 ;
    sub uni192B1920193A by uni1920 uni193A uni192B ;
    sub uni192B1922193A by uni1922 uni193A uni192B ;
    sub uni192B1927193A by uni1927 uni193A uni192B ;
    sub uni192B1928193A by uni1928 uni193A uni192B ;
    sub uni192B193A by uni193A uni192B ;
    sub uni192B1920 by uni1920 uni192B ;
    sub uni192B1922 by uni1922 uni192B ;
    sub uni192B1927 by uni1927 uni192B ;
    sub uni192B1928 by uni1928 uni192B ;
} GlideVowelDecomp;

lookup RaUkar {
  lookupflag 0 ;
  # The RaUkar substitution rule replaces Consonant, Ra, Ukar with a ligature.
     sub @Cons uni192A uni1922 by @ConsRaU;
} RaUkar;

lookup Ukar {
  lookupflag 0 ;
  # The Ukar substitution rule replaces Consonant + Ukar with a ligature. It also applies to the Vowel-Carrier, which has its own ligature with ukar.
     sub @Cons uni1922 by @ConsU;
    sub uni1900 uni1922 by uni19001922 ;
} Ukar;

lookup IkarK {
  lookupflag 0 ;
  # The IkarK substitution rule replaces Ikar + Kemphreng with a ligature.
  # The ligature is then positioned properly on the base consonant via the positioning rule EO.
    sub uni1921 uni193A by uni1921193A ;
} IkarK;

lookup GlideIkar_target {
  lookupflag 0 ;
    #  subrule of type ADJUST_SINGLE
    pos @YaWa <0 0 -475 0>;
} GlideIkar_target ;

lookup GlideIkar {
  lookupflag 0 ;
    pos @YaWa' lookup GlideIkar_target @Ikar ;
} GlideIkar;

lookup IkarKWid_target { # The IkarKWid lookup target adds 110 units of width to the IkarKemphreng ligature
  lookupflag 0 ;
    #  subrule of type ADJUST_SINGLE
    pos uni1921193A <0 0 110 0>;
} IkarKWid_target ;

lookup IkarKWid {
  lookupflag 0 ;
  # The IkarKWid lookup, applied to the Kern feature,
  # kerns the IkarKemphreng ligature when followed by a consonant with akar on it.
  # This prevents the akar from overprinting the rightmost dot of the kemphreng.
  # (The dot overhangs to the right slightly,
  # which is OK unless the following character has akar on it).
    pos uni1921193A' lookup IkarKWid_target @Cons uni1920 ;
} IkarKWid;

lookup Akar {
  lookupflag 0 ;
  # The Akar positioning rule positions the Akar on all consonants, including the vowel carrier.
    pos base @U mark @_U; # was @MARK_Aabove
} Akar;

lookup Kemphreng {
  lookupflag 0 ;
  # The Kemphreng positioning rule positions the Kemphreng on all consonants, including the vowel carrier,
  # plus conjuncts of consonant plus Ukar and consonant plus Ra + Ukar
    pos base @K mark @_K; # was @MARK_K
} Kemphreng;

lookup EO {
  lookupflag 0 ;
  # The EO positioning rule positions ekar and okar on all consonants plus the vowel carrier.
    pos base @O mark @_O; # was @MARK_eo
} EO;

lookup VKem {
  lookupflag MarkAttachmentType @VowelsKem ;
  # The VKem positioning rule positions the kemphreng on all upper vowels (except ikar, which has its own ligature).
  # The vowel itself is positioned on the consonant with the Akar or EO positioning rule.
    pos mark @K_MarkBase mark @_K; # was @MARK_VK
} VKem;

lookup GlideU {
  lookupflag 0 ;
  # The GlideU positioning rule positions the Ukar on the glides Ya and Wa.
  # (There is already a ligature for each consonant with the Ra+Ukar combination).
    pos base @G mark @_G; # was @MARK_U
} GlideU;


#**********************************
#  Features
#**********************************

feature ccmp {  # Glyph Composition/Decomposition
    script DFLT;  # Default
        language dflt;  # Default
            lookup OoAuDecomp;
            lookup EeAiKComp;
            lookup EeAiKDecomp;
            lookup GlideVowelComp;
            lookup GlideVowelDecomp;
} ccmp ;

feature kern {  # Kerning
    script DFLT;  # Default
        language dflt;  # Default
            lookup GlideIkar;
            lookup IkarKWid;
} kern ;

feature rlig {  # Required Ligatures
    script DFLT;  # Default
        language dflt;  # Default
            lookup RaUkar;
            lookup Ukar;
            lookup IkarK;
} rlig ;

feature mark {  # Mark Positioning
    script DFLT;  # Default
        language dflt;  # Default
            lookup Akar;
            lookup Kemphreng;
            lookup EO;
} mark ;

feature mkmk {  # Mark to Mark Positioning
    script DFLT;  # Default
        language dflt;  # Default
            lookup VKem;
            lookup GlideU;
} mkmk ;
